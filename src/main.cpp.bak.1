/*
  使用ESP8266驱动LCD1602显示网络时间
  每隔1小时同步一次时间

  使用 VS Code + platformIO 开发
*/

//所需的函数库
#include <Arduino.h>      //基础函数库
#include <Time.h>         //时间函数库，用于unix时间戳转换
#include <NTPClient.h>    //NTP客户端库，用于向NTP服务器请求时间
#include <ESP8266WiFi.h>  //ESP8266WiFi库，用于链接网络
#include <WiFiUdp.h>      //UDP函数库，用于NTP服务器协议

#include <IRremote.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>  //两个函数库用于驱动LCD1602

const char *ssid     = "_55987_WiFi";   //确定WiFi名称
const char *password = "20020719";      //确定WiFi密码

const int RECV_PIN = D4;   // 定义红外接收引脚
bool LED_Button = 1;      //定义背灯状态

const long utcOffsetInSeconds = 3600*8; //UTC偏移确定量，使用的是东八区
const char week[7][10] = {"Sun ", "Mon ", "Tues", "Wedn ", "Thur", "Fri ", "Sat "};

unsigned long previousMillis_1 = 0;
unsigned long previousMillis_2 = 0;
unsigned long previousMillis_3 = 0;

LiquidCrystal_I2C LCD_1602(0x27,16,2);

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "time.nist.gov", utcOffsetInSeconds);
// 创建IRrecv对象
IRrecv irrecv(RECV_PIN);
// 创建decode_results对象用于存储解码结果
decode_results results;

// 将Unix时间戳转换为日期时间格式
String unixTimestampToDate(time_t timestamp) {
    struct tm *timeinfo;
    timeinfo = localtime(&timestamp);

    char buffer[80];
    strftime(buffer, sizeof(buffer), "%Y-%m-%d", timeinfo);
    return String(buffer);
}

// 将Unix时间戳转换为日期时间格式
String unixTimestampToTime(time_t timestamp) {
    struct tm *timeinfo;
    timeinfo = localtime(&timestamp);

    char buffer[80];
    strftime(buffer, sizeof(buffer), "%H:%M:%S", timeinfo);
    return String(buffer);
}

void setup() {

    WiFi.begin(ssid, password);
    LCD_1602.init();
    LCD_1602.backlight();

    while ( WiFi.status() != WL_CONNECTED ) {
    delay ( 1000 );
    LCD_1602.setCursor(0,0);
    LCD_1602.print("Connecting...");
    }

    LCD_1602.setCursor(0,1);
    LCD_1602.print("Done!");
    delay(1000);

    timeClient.begin();
    for(int i=0;i<10;i++){
      timeClient.update();
    }
    LCD_1602.clear();
    
  irrecv.enableIRIn();
}

void loop() {    
    // 示例Unix时间戳

    unsigned long currentMillis = millis();
    if (currentMillis - previousMillis_1 >= 1000) {
    previousMillis_1 = currentMillis;  // 重置上一次执行任务的时间
    time_t timestamp = timeClient.getEpochTime();

    // 调用函数并输出结果
    String formattedDate = unixTimestampToDate(timestamp);
    String formattedTime = unixTimestampToTime(timestamp);

    LCD_1602.setCursor(0,0);
    LCD_1602.print(String(formattedDate));
    LCD_1602.setCursor(0,1);
    LCD_1602.print(String(formattedTime));
    
    LCD_1602.setCursor(11,0);
    LCD_1602.print(week[timeClient.getDay()]);
    
    LCD_1602.setCursor(11,1);
    LCD_1602.print("    ");
}

    if (currentMillis - previousMillis_2 >= 3600*1000) {
    previousMillis_2 = currentMillis;  // 重置上一次执行任务的时间

    LCD_1602.setCursor(11,1);
    LCD_1602.print("SYNC");
    timeClient.update();
    }

    if (currentMillis - previousMillis_3 >= 10) {
    previousMillis_3 = currentMillis;  // 重置上一次执行任务的时间
      // 检查是否有红外信号
      if (irrecv.decode(&results)) {
    // 打印接收到的红外信号
      if (results.value == 0xFFA25D){
      LED_Button = !LED_Button;
  }
    // 重置接收器以接收下一个信号
    irrecv.resume();

    if (LED_Button == true)
    LCD_1602.backlight();
    else LCD_1602.noBacklight();
  }


}
}